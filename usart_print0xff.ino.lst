
usart_print0xff.ino.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ee  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013a  00000000  00000000  00000563  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018e  00000000  00000000  0000069d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e0  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

/** Initializes the serial port and prints "banner. */
// serial port 115200 N81
static void serial_init(void)
{
  UBRR0H = UBBRn_V >> 8;
  96:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBBRn_V;
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0B = _BV(TXEN0);
  a0:	80 93 c1 00 	sts	0x00C1, r24
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f1 e0       	ldi	r31, 0x01	; 1
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <main+0x22>
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
  aa:	80 91 c0 00 	lds	r24, 0x00C0
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <main+0x14>
    // Start transmission
    UDR0 = data; 
  b2:	90 93 c6 00 	sts	0x00C6, r25

static void usart_putstr(char *s) {
    // loop through entire string
    while (*s) { 
        usart_putchar(*s);
        s++;
  b6:	31 96       	adiw	r30, 0x01	; 1
    UDR0 = data; 
}

static void usart_putstr(char *s) {
    // loop through entire string
    while (*s) { 
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	b1 f7       	brne	.-20     	; 0xaa <main+0x14>
  be:	ea e0       	ldi	r30, 0x0A	; 10
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <main+0x3c>
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
  c4:	80 91 c0 00 	lds	r24, 0x00C0
  c8:	85 ff       	sbrs	r24, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <main+0x2e>
    // Start transmission
    UDR0 = data; 
  cc:	90 93 c6 00 	sts	0x00C6, r25

static void usart_putstr(char *s) {
    // loop through entire string
    while (*s) { 
        usart_putchar(*s);
        s++;
  d0:	31 96       	adiw	r30, 0x01	; 1
    UDR0 = data; 
}

static void usart_putstr(char *s) {
    // loop through entire string
    while (*s) { 
  d2:	90 81       	ld	r25, Z
  d4:	99 23       	and	r25, r25
  d6:	b1 f7       	brne	.-20     	; 0xc4 <main+0x2e>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
    // Start transmission
    UDR0 = data; 
  dc:	70 e3       	ldi	r23, 0x30	; 48
}

static void usart_putstr(char *s) {
    // loop through entire string
    while (*s) { 
  de:	68 e7       	ldi	r22, 0x78	; 120
  e0:	50 e2       	ldi	r21, 0x20	; 32
  e2:	4a e0       	ldi	r20, 0x0A	; 10
  e4:	92 2f       	mov	r25, r18
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
  e6:	80 91 c0 00 	lds	r24, 0x00C0
  ea:	85 ff       	sbrs	r24, 5
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <main+0x50>
    // Start transmission
    UDR0 = data; 
  ee:	70 93 c6 00 	sts	0x00C6, r23
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
  f2:	80 91 c0 00 	lds	r24, 0x00C0
  f6:	85 ff       	sbrs	r24, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <main+0x5c>
    // Start transmission
    UDR0 = data; 
  fa:	60 93 c6 00 	sts	0x00C6, r22
{
    usart_putchar('0');
    usart_putchar('x');

    uint8_t vn = v >> 4;
    usart_putchar(HEX_TABLE[vn]);
  fe:	e9 2f       	mov	r30, r25
 100:	e2 95       	swap	r30
 102:	ef 70       	andi	r30, 0x0F	; 15
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e6 5b       	subi	r30, 0xB6	; 182
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	e0 81       	ld	r30, Z
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
 10c:	80 91 c0 00 	lds	r24, 0x00C0
 110:	85 ff       	sbrs	r24, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <main+0x76>
    // Start transmission
    UDR0 = data; 
 114:	e0 93 c6 00 	sts	0x00C6, r30
    usart_putchar('x');

    uint8_t vn = v >> 4;
    usart_putchar(HEX_TABLE[vn]);
    vn = v & 0x0F;
    usart_putchar(HEX_TABLE[vn]);
 118:	e9 2f       	mov	r30, r25
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ef 70       	andi	r30, 0x0F	; 15
 11e:	f0 70       	andi	r31, 0x00	; 0
 120:	e6 5b       	subi	r30, 0xB6	; 182
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	e0 81       	ld	r30, Z
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
 126:	80 91 c0 00 	lds	r24, 0x00C0
 12a:	85 ff       	sbrs	r24, 5
 12c:	fc cf       	rjmp	.-8      	; 0x126 <main+0x90>
    // Start transmission
    UDR0 = data; 
 12e:	e0 93 c6 00 	sts	0x00C6, r30
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
 132:	80 91 c0 00 	lds	r24, 0x00C0
 136:	85 ff       	sbrs	r24, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <main+0x9c>
    // Start transmission
    UDR0 = data; 
 13a:	50 93 c6 00 	sts	0x00C6, r21

  short i;
  for (i = 0; i <=0xff; i++) {
    usart_printhex(i);
    usart_putchar(' ');
    if ((i & 0x0f) == 0x0f){ usart_putchar('\n');}
 13e:	c9 01       	movw	r24, r18
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	90 70       	andi	r25, 0x00	; 0
 144:	0f 97       	sbiw	r24, 0x0f	; 15
 146:	31 f4       	brne	.+12     	; 0x154 <main+0xbe>
// ********************************************************************************
// usart Related
// ********************************************************************************
static void usart_putchar(char data) {
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (_BV(UDRE0))) );
 148:	80 91 c0 00 	lds	r24, 0x00C0
 14c:	85 ff       	sbrs	r24, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <main+0xb2>
    // Start transmission
    UDR0 = data; 
 150:	40 93 c6 00 	sts	0x00C6, r20

  usart_putstr("xiaolaba\n");
  usart_putstr("Arduino Nano, ATmega168, 115200, N81, serial print 0x00 - 0xff\n");

  short i;
  for (i = 0; i <=0xff; i++) {
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	20 30       	cpi	r18, 0x00	; 0
 15c:	38 07       	cpc	r19, r24
 15e:	11 f6       	brne	.-124    	; 0xe4 <main+0x4e>

int main(void)
{   
    serial_init();
    return 0;
}
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
